print("x has low tolerance")
} else if(x == 3 & x < 8) {
print("x has moderate tolerance")
} else {
print("x has high tolerance")
}
month <- 4
if(month %in% 1:9) {
paste0("data/", "Month-0", month, ".csv")
} else if(month %in% 10:12) {
paste0("data/", "Month-", month, ".csv")
} else {
print("Invalid Month")
}
>sample
# base R approach
x <- c(runif(5), NA)
ifelse(x > .5, "greater than", "less than")
# dplyr R approach
dplyr::if_else(x > .5, "greater than", "less than", missing = "something else")
set.seed(11)
(x <- c(runif(10), 3.0, NA, Inf))
dplyr::case_when(
x < .3   ~ "low",
x < .7   ~ "medium",
x <=1.0  ~ "high",
is.na(x) ~ "missing",
TRUE     ~ "out of bounds"
)
dplyr::case_when(
x < .3   ~ "low",
x < .7   ~ "medium",
x <=1.0  ~ "high",
is.na(x) ~ "missing",
TRUE     ~ "out of bounds"
)
x
length(X)
length(x)
month <- 1:13
#if(month %in% 1:9) {
#  paste0("data/", "Month-0", month, ".csv")
#} else if(month %in% 10:12) {
#  paste0("data/", "Month-", month, ".csv")
#} else {
#  print("Invalid month")
#}
dplyr::case_when(
x %in% 1:9 ~ paste0("data/", "Month-0", month, ".csv"),
x %in% 10:12 ~ paste0("data/", "Month-", month, ".csv"),
TRUE ~ print("Invalid month")
)
dplyr::case_when(
month %in% 1:9 ~ paste0("data/", "Month-0", month, ".csv"),
month %in% 10:12 ~ paste0("data/", "Month-", month, ".csv"),
TRUE ~ print("Invalid month")
)
mpg <- ggplot2::mpg
# if_else within mutate
mpg %>%
select(manufacturer, model, year, cty) %>%
mutate(cty_rating = if_else(cty > median(cty), "Above", "Below"))
# case_when within mutate
mpg %>%
select(manufacturer, model, year, cty) %>%
mutate(cty_rating = case_when(
cty < quantile(cty, .33) ~ "Low",
cty < quantile(cty, .77) ~ "Medium",
TRUE                     ~ "High"
))
# fill in the blanks
nycflights13::flights %>%
filter(arr_delay > 0) %>%
select(carrier, tailnum, arr_delay) %>%
mutate(severity = case_when(
arr_delay < quantile(arr_delay, .25) ~ 1,
arr_delay < quantile(arr_delay, .5) ~ 2,
arr_delay < quantile(arr_delay, .75) ~ 3,
TRUE ~ 4
))
# fill in the blanks
library(nycflights13)
install.packages('nycflights12')
install.packages('nycflights13')
# fill in the blanks
library(nycflights13)
nycflights13::flights %>%
filter(arr_delay > 0) %>%
select(carrier, tailnum, arr_delay) %>%
mutate(severity = case_when(
arr_delay < quantile(arr_delay, .25) ~ 1,
arr_delay < quantile(arr_delay, .5) ~ 2,
arr_delay < quantile(arr_delay, .75) ~ 3,
TRUE ~ 4
))
nycflights13::flights
nycflights13::flights %>%
dplyr::filter(arr_delay > 0) %>%
select(carrier, tailnum, arr_delay) %>%
mutate(severity = case_when(
arr_delay < quantile(arr_delay, .25) ~ 1,
arr_delay < quantile(arr_delay, .5) ~ 2,
arr_delay < quantile(arr_delay, .75) ~ 3,
TRUE ~ 4
))
library(tidyverse)
library(here)
library(completejourney)
library(readr)
c(promotions, transactions) %<-% get_data(which = 'both', verbose = FALSE)
view(transactions)
view(campaigns)
view(coupon_redemptions)
view(coupons)
view(products)
view(campaign_descriptions)
view(demographics)
transactions <- transactions %>% mutate(date = as.Date(transaction_timestamp))
view(transactions)
# Assume transactions with any discount are redeemed coupons
trans1 <- transactions %>%
dplyr::filter(retail_disc>0 | coupon_disc>0 | coupon_match_disc>0) %>%
select(household_id, store_id, product_id, sales_value:coupon_match_disc, week, date)
# 1. Join coupon_redemptions & campaign_descriptions => have the start and end date of the campaign.
coupon_redemp_description <- coupon_redemptions %>%
full_join(campaign_descriptions, by = 'campaign_id') %>%
drop_na(redemption_date)
# 2. Join coupon_redemptions & coupons => Understand which product_ids are associated with each campaign.
coupon_redemp_coupons <- coupon_redemptions %>%
left_join(coupons, by=c('campaign_id', 'coupon_upc'), relationship = 'many-to-many') %>%
drop_na(redemption_date) # matching both coupon_upc and campaign_id
coupon_redemp_description
coupon_redemp_coupons
# 3. Join 1. and 2.
coupons1 <- coupon_redemp_description %>%
left_join(coupon_redemp_coupons,
by=c('campaign_id','household_id','coupon_upc','redemption_date'),
relationship = 'many-to-many')
sample <- coupons %>% inner_join(campaign_descriptions) %>% inner_join(coupon_redemptions, relationship = 'many-to-many') %>% rename(date = redemption_date)
sample
coupons1
sample == coupons1
check_dataframes_equal <- function(df1, df2) {
return(isTRUE(all.equal(df1, df2)))
}
check_dataframes_equal(coupons1, sample)
sample <- sample %>% arrange(desc(coupon_upc))
coupons1 <- coupons1 %>% arrange(desc(coupon_upc))
check_dataframes_equal(coupons1, sample)
coupons1
sample1
sample
sampledc <- sample[c('household_id', 'coupon_upc', 'campaign_id', 'redemption_date', 'campaign_type', 'start_date', 'end_date', 'product_id')]
# 3. Join 1. and 2.
coupons1 <- coupon_redemp_description %>%
left_join(coupon_redemp_coupons,
by=c('campaign_id','household_id','coupon_upc','redemption_date'),
relationship = 'many-to-many') %>%
rename(date = redemption_date)
sampledc <- sample[c('household_id', 'coupon_upc', 'campaign_id', 'redemption_date', 'campaign_type', 'start_date', 'end_date', 'product_id')]
sampledc <- sample[c('household_id', 'coupon_upc', 'campaign_id', 'date', 'campaign_type', 'start_date', 'end_date', 'product_id')]
check_dataframes_equal(coupons1, sampledc)
coupons1
sampledc
sampledc <- sampledc %>% arrange(desc(household_id))
coupons1 <- coupons1 %>% arrange(desc(household_id))
check_dataframes_equal(coupons1, sampledc)
coupons1
sampledc
sampledc$household_id == coupons1$household_id
all(sampledc$household_id == coupons1$household_id)
all(sampledc$product_id == coupons1$product_id)
all(sampledc$coupon_upc == coupons1$coupon_upc)
all(sampledc$campaign_id == coupons1$campaign_id)
# Join coupons, coupon_redemptions, campaign_description to get full info of coupons
redemptions <- coupons %>%
inner_join(campaign_descriptions) %>%
inner_join(coupon_redemptions, relationship = 'many-to-many') %>%
rename(date = redemption_date)
redemptions
view(redemptions)
view(trans1)
trans1
transWithRedemptions <- redemptions %>%
inner_join(trans1, by = c('household_id','date','product_id'))
transWithRedemptions <- redemptions %>%
inner_join(trans1, by = c('household_id','date','product_id'), relationship = 'many-to-many')
description_transWithRedemptions <- "This dataset contains every transaction using coupon redemption"
writeLines(description_transWithRedemptions, 'description_transWithRedemptions.txt')
write_csv(transWithRedemptions, 'Transactions_With_Redemptions.csv')
transWithRedemptions
transWithRedemptions_groupedByProductStoreId <- transWithRedemptions %>%
group_by(product_id, store_id) %>%
summarise(total_sales = sum(sales_value), .groups = 'drop') %>%
arrange(desc(total_sales))
transWithRedemptions_groupedByProductStoreId
product_info_id <- unique(transWithRedemptions_groupedByProductStoreId$product_id)
store_info_id <- unique(transWithRedemptions_groupedByProductStoreId$store_id)
# Get rid of location 0 for display_location
promotions_displayNot0 <- promotions %>%
dplyr::filter(display_location != 0) %>%
select(-mailer_location)
# Total sales from transactions with redemption, grouped by product_id and store_id
transWithRedemptions_groupedByProductStoreId <- transWithRedemptions %>%
group_by(product_id, store_id) %>%
summarise(total_sales = sum(sales_value), .groups = 'drop') %>%
arrange(desc(total_sales))
# Get unique existing product id and store id from the above
product_info_id <- unique(transWithRedemptions_groupedByProductStoreId$product_id)
store_info_id <- unique(transWithRedemptions_groupedByProductStoreId$store_id)
# Get rid of location 0 (not display) for display_location
promotions_displayNot0 <- promotions %>%
dplyr::filter(display_location != 0) %>%
select(-mailer_location)
#
transWithRedemptions_groupedByProductId_displayLocation <- promotions_displayNot0 %>%
dplyr::filter((product_id %in% product_info_id) & (store_id %in% store_info_id)) %>%
right_join(transWithRedemptions_groupedByProductStoreId, by=c('product_id', 'store_id'), relationship = 'many-to-many') %>%
select(-week) %>%
drop_na(total_sales) %>% ##
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size')) %>%
drop_na(display_location) ##
transWithRedemptions_groupedByProductId_displayLocation
#
transWithRedemptions_groupedByProductId_displayLocation <- promotions_displayNot0 %>%
dplyr::filter((product_id %in% product_info_id) & (store_id %in% store_info_id)) %>%
full_join(transWithRedemptions_groupedByProductStoreId, by=c('product_id', 'store_id'), relationship = 'many-to-many') %>%
select(-week) %>%
drop_na(total_sales) %>% ##
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size')) %>%
drop_na(display_location) ##
transWithRedemptions_groupedByProductId_displayLocation
#
transWithRedemptions_groupedByProductId_displayLocation <- promotions_displayNot0 %>%
dplyr::filter((product_id %in% product_info_id) & (store_id %in% store_info_id)) %>%
inner_join(transWithRedemptions_groupedByProductStoreId, by=c('product_id', 'store_id'), relationship = 'many-to-many') %>%
select(-week) %>%
drop_na(total_sales) %>% ##
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size')) %>%
drop_na(display_location) ##
transWithRedemptions_groupedByProductId_displayLocation
colSums(is.na(transWithRedemptions_groupedByProductId_displayLocation))
transWithRedemptions_groupedByProductId_displayLocation
transWithRedemptions
# Join coupons, coupon_redemptions, campaign_description to get full info of coupons
redemptions <- coupons %>%
inner_join(campaign_descriptions) %>%
inner_join(coupon_redemptions, relationship = 'many-to-many') %>%
rename(date = redemption_date)
redemptions
trans1
# Every transaction with redemptions
transWithRedemptions <- redemptions %>%
left_join(trans1, by = c('household_id','date','product_id'), relationship = 'many-to-many')
transWithRedemptions
colSums(is.na(transWithRedemptions))
redemptions
# Every transaction with redemptions
transWithRedemptions <- redemptions %>%
full_join(trans1, by = c('household_id','date','product_id'), relationship = 'many-to-many')
colSums(is.na(transWithRedemptions))
# Every transaction with redemptions
transWithRedemptions <- redemptions %>%
left_join(trans1, by = c('household_id','date','product_id'), relationship = 'many-to-many')
colSums(is.na(transWithRedemptions))
transWithRedemptions <- redemptions %>%
inner_join(trans1, by = c('household_id','date','product_id'), relationship = 'many-to-many')
write_csv(transWithRedemptions, 'Transactions_With_Redemptions.csv')
# Total sales from transactions with redemption, grouped by product_id and store_id
transWithRedemptions_groupedByProductStoreId <- transWithRedemptions %>%
group_by(product_id, store_id) %>%
summarise(total_sales = sum(sales_value), .groups = 'drop') %>%
arrange(desc(total_sales))
# Get unique existing product id and store id from the above
product_info_id <- unique(transWithRedemptions_groupedByProductStoreId$product_id)
store_info_id <- unique(transWithRedemptions_groupedByProductStoreId$store_id)
# Get rid of location 0 (not display) for display_location
promotions_displayNot0 <- promotions %>%
dplyr::filter(display_location != 0) %>%
select(-mailer_location)
promotions_displayNot0
transWithRedemptions_groupedByProductStoreId
# Join display location to transactions with redemptions by keys product_id and store_id
transWithRedemptions_groupedByProductId_displayLocation <- promotions_displayNot0 %>%
dplyr::filter((product_id %in% product_info_id) & (store_id %in% store_info_id)) %>%
inner_join(transWithRedemptions_groupedByProductStoreId, by=c('product_id', 'store_id'), relationship = 'many-to-many') %>%
select(-week) %>%
drop_na(total_sales) %>% ##
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size')) %>%
drop_na(display_location) ##
# Get rid of location 0 for mailer_location
promotions_mailerNot0 <- promotions %>%
dplyr::filter(mailer_location != 0) %>%
select(-display_location)
# Join mailer location to transactions with redemptions by keys product_id and store_id
transWithRedemptions_groupedByProductId_mailerLocation <- promotions_mailerNot0 %>%
dplyr::filter(product_id %in% product_info_id & store_id %in% store_info_id) %>%
left_join(transWithRedemptions_groupedByProductId, by=c('product_id', 'store_id'), relationship = 'many-to-many') %>%
select(-week) %>%
drop_na(total_sales) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size')) %>%
drop_na(mailer_location) %>%
mutate(product_category = replace_na(product_category, 'None'))
# Join mailer location to transactions with redemptions by keys product_id and store_id
transWithRedemptions_groupedByProductId_mailerLocation <- promotions_mailerNot0 %>%
dplyr::filter(product_id %in% product_info_id & store_id %in% store_info_id) %>%
left_join(transWithRedemptions_groupedByProductStoreId, by=c('product_id', 'store_id'), relationship = 'many-to-many') %>%
select(-week) %>%
drop_na(total_sales) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size')) %>%
drop_na(mailer_location) %>%
mutate(product_category = replace_na(product_category, 'None'))
# Join mailer location to transactions with redemptions by keys product_id and store_id
transWithRedemptions_groupedByProductId_displayLocation <- promotions_mailerNot0 %>%
dplyr::filter((product_id %in% product_info_id) & (store_id %in% store_info_id)) %>%
inner_join(transWithRedemptions_groupedByProductStoreId, by=c('product_id', 'store_id'), relationship = 'many-to-many') %>%
select(-week) %>%
drop_na(total_sales) %>% ##
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size')) %>%
drop_na(mailer_location)
o
# Export as csv file
getwd()
setwd(here()+'/BANA4080_midterm_project')
setwd(here(+'/BANA4080_midterm_project'))
setwd(here('/BANA4080_midterm_project'))
setwd("/Users/ezishr/Documents/CINCY/Fall 2024/BANA 4080/BANA4080_midterm_project")
write_csv(transWithRedemptions_groupedByProductId_mailerLocation, "Transactions_W_Redemptions_Mailer_Location.csv")
write_csv(transWithRedemptions_groupedByProductId_displayLocation, "Transactions_W_Redemptions_Display_Location.csv")
write_csv(transWithRedemptions, 'Transactions_With_Redemptions.csv')
## d. Customer doesn’t use the coupons if products are not shown in mail (mailer_location) ----
# Promotions with display_location = 0, which is not displayed
promotions_displayIs0 <- promotions %>%
dplyr::filter(display_location == 0) %>%
select(-mailer_location)
promotions_displayIs0
# Join display location = 0 to transactions with redemptions by keys product_id and store_id
transWithRedemptions_groupedByProductId_displayLocationIs0 <- promotions_displayIs0 %>%
dplyr::filter(product_id %in% product_info_id & store_id %in% store_info_id) %>%
left_join(transWithRedemptions_groupedByProductStoreId, by=c('product_id', 'store_id'), relationship = 'many-to-many') %>%
select(-week) %>%
drop_na(total_sales) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size')) %>%
drop_na(display_location)
# Promotions with mailer_location = 0, which is not displayed
promotions_mailerIs0 <- promotions %>%
dplyr::filter(mailer_location == 0) %>%
select(-display_location)
# Join mailer location to transactions with redemptions by keys product_id and store_id
transWithRedemptions_groupedByProductId_mailerLocationIs0 <- promotions_mailerIs0 %>%
dplyr::filter(product_id %in% product_info_id & store_id %in% store_info_id) %>%
left_join(transWithRedemptions_groupedByProductStoreId, by=c('product_id', 'store_id'), relationship = 'many-to-many') %>%
select(-week) %>%
drop_na(total_sales) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size')) %>%
drop_na(mailer_location)
# Export as csv files
write_csv(transWithRedemptions_groupedByProductId_displayLocationIs0, 'Transactions_W_Redemptions_Not_Displayed.csv')
write_csv(transWithRedemptions_groupedByProductId_mailerLocationIs0, 'Transactions_W_Redemptions_Not_Mailed.csv')
library(tidyverse)
library(here)
library(completejourney)
library(readr)
c(promotions, transactions) %<-% get_data(which = 'both', verbose = FALSE)
setwd('/Users/ezishr/Documents/CINCY/Fall 2024/BANA 4080/BANA4080_midterm_project')
transactions
transactions <- transactions %>% mutate(date = as.Date(transaction_timestamp))
promotions
promotions %>% group_by(product_id, store_id, display_location) %>%
n_distinct()
promotions %>% group_by(product_id, store_id, display_location) %>%
mutate(count = n())
promotions %>% group_by(product_id, store_id, display_location) %>%
summarise(count = n())
promos <- promotions
sample <- promos %>% dplyr::distinct(product_id, store_id, diplay_location, .keep_all = TRUE)
sample
sample <- promos %>% dplyr::distinct(product_id, store_id, diplay_location, .keep_all = TRUE)
sample <- promos %>% dplyr::distinct(product_id, store_id, display_location, .keep_all = TRUE)
sample
sample <- promos %>%
dplyr::distinct(product_id, store_id, display_location, .keep_all = TRUE) %>%
select(product_id, store_id, display_location)
sample %>% group_by(product_id, store_id, display_location) %>% summarise(count = n())
sample %>% group_by(product_id, store_id, display_location) %>% summarise(count = n()) %>% filter(count > 1)
sample %>% group_by(product_id, store_id, display_location) %>% summarise(count = n()) %>% dplyr::filter(count > 1)
library(tidyverse)
library(here)
library(completejourney)
library(readr)
c(promotions, transactions) %<-% get_data(which = 'both', verbose = FALSE)
setwd('/Users/ezishr/Documents/CINCY/Fall 2024/BANA 4080/BANA4080_midterm_project')
transactions <- transactions %>% mutate(date = as.Date(transaction_timestamp))
# OFFICIAL CODE ------------
# Assume transactions with any discount are redeemed coupons
trans1 <- transactions %>%
dplyr::filter(retail_disc>0 | coupon_disc>0 | coupon_match_disc>0) %>%
select(household_id, store_id, product_id, sales_value:coupon_match_disc, week, date)
library(tidyverse)
library(here)
library(completejourney)
library(readr)
c(promotions, transactions) %<-% get_data(which = 'both', verbose = FALSE)
setwd('/Users/ezishr/Documents/CINCY/Fall 2024/BANA 4080/BANA4080_midterm_project')
transactions <- transactions %>% mutate(date = as.Date(transaction_timestamp))
# OFFICIAL CODE ------------
# Assume transactions with any discount are redeemed coupons
trans1 <- transactions %>%
dplyr::filter(retail_disc>0 | coupon_disc>0 | coupon_match_disc>0) %>%
select(household_id, store_id, product_id, sales_value:coupon_match_disc, week, date)
# Join coupons, coupon_redemptions, campaign_description to get full info of coupons
redemptions <- coupons %>%
inner_join(campaign_descriptions) %>%
inner_join(coupon_redemptions, relationship = 'many-to-many') %>%
rename(date = redemption_date)
transWithRedemptions <- redemptions %>%
inner_join(trans1, by = c('household_id','product_id','date'), relationship = 'many-to-many') %>%
select('coupon_upc', 'product_id', 'store_id', 'campaign_id', "campaign_type", 'start_date', 'end_date', 'household_id', 'date', 'sales_value', 'retail_disc') %>%
arrange(desc(product_id))
# Total sales from transactions with redemption, grouped by product_id and store_id
transWithRedemptions_groupedByProductStoreId <- transWithRedemptions %>%
group_by(product_id, store_id) %>%
summarise(total_sales = sum(sales_value))
#### Check if there is duplicate comb of product_id and store_id in every row
duplicates <- transWithRedemptions_grouped %>%
dplyr::group_by(product_id, store_id) %>%
dplyr::summarize(count = n()) %>%
dplyr::filter(count > 1)
transWithRedemptions_grouped <- transWithRedemptions_groupedByProductStoreId
#### Check if there is duplicate comb of product_id and store_id in every row
duplicates <- transWithRedemptions_grouped %>%
dplyr::group_by(product_id, store_id) %>%
dplyr::summarize(count = n()) %>%
dplyr::filter(count > 1)
print(duplicates)
# Get unique existing product id and store id from the above
product_info_id <- unique(transWithRedemptions_groupedByProductStoreId$product_id)
store_info_id <- unique(transWithRedemptions_groupedByProductStoreId$store_id)
promos
# Get rid of location 0 (not display) for display_location
promos_display <- promotions %>% select(-mailer_location:week)
# Get rid of location 0 (not display) for display_location
promos_display <- promotions %>% select(-mailer_location:week)
# Get rid of location 0 (not display) for display_location
promos_display <- promotions %>% select(-(mailer_location:week))
promos_display
promos_display <- promos_display %>% dplyr::distinct(product_id, store_id, display_location, .keep_all = TRUE)
# Join display location to transactions with redemptions by keys product_id and store_id
transWithRedemptions_groupedByProductId_displayLocation <- transWithRedemptions_groupedByProductStoreId %>%
inner_join(promos_display, by=c('product_id', 'store_id')) %>%
select(-week) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size'))
# Join display location to transactions with redemptions by keys product_id and store_id
transWithRedemptions_groupedByProductId_displayLocation <- transWithRedemptions_groupedByProductStoreId %>%
inner_join(promos_display, by=c('product_id', 'store_id')) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size'))
view(transWithRedemptions_groupedByProductId_displayLocation)
promos_display <- promos_display %>%
dplyr::distinct(product_id, store_id, display_location, .keep_all = TRUE) %>%
dplyr::filter(display_location != 0)
# Join display location to transactions with redemptions by keys product_id and store_id
transWithRedemptions_groupedByProductId_displayLocation <- transWithRedemptions_groupedByProductStoreId %>%
inner_join(promos_display, by=c('product_id', 'store_id')) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size'))
view(transWithRedemptions_groupedByProductId_displayLocation)
# Get rid of location 0 for mailer_location
promos_mailer <- promotions %>%
select(-c(display_location, week)) %>%
dplyr::distinct(product_id, store_id, display_location, .keep_all = TRUE) %>%
dplyr::filter(display_location != 0)
# Get rid of location 0 for mailer_location
promos_mailer <- promotions %>%
select(-c(display_location, week)) %>%
dplyr::distinct(product_id, store_id, display_location, .keep_all = TRUE) %>%
dplyr::filter(mailer_location != 0)
# Get rid of location 0 for mailer_location
promos_mailer <- promotions %>%
select(-c(display_location, week)) %>%
dplyr::distinct(product_id, store_id, mailer_location, .keep_all = TRUE) %>%
dplyr::filter(mailer_location != 0)
# Join mailer location to transactions with redemptions by keys product_id and store_id
transWithRedemptions_groupedByProductId_mailerLocation <- promos_mailer %>%
inner_join(transWithRedemptions_groupedByProductStoreId, by=c('product_id', 'store_id')) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size'))
view(transWithRedemptions_groupedByProductId_mailerLocation)
## d. Customer doesn’t use the coupons if products are not shown in mail (mailer_location) ----
# Promotions with display_location = 0, which is not displayed
promos_display0 <- promotions %>%
select(-c(mailer_location, week)) %>%
dplyr::distinct(product_id, store_id, display_location, .keep_all = TRUE) %>%
dplyr::filter(display_location == 0)
view(promos_display0)
## d. Customer doesn’t use the coupons if products are not shown in mail (mailer_location) ----
# Promotions with display_location = 0, which is not displayed
promos_display0 <- promotions %>%
select(-c(mailer_location, week)) %>%
dplyr::filter(display_location == 0) %>%
dplyr::distinct(product_id, store_id, .keep_all = TRUE)
view(promos_display0)
