<<<<<<< HEAD
=======
'1'='Store Front',
'2'='Store Rear',
'3'='Front end cap',
'4'='Mid-aisle end cap',
'5'='Rear end cap',
'6'='Side aisle end cap',
'7'='In-aisle',
'9'='Secondary Location',
'A'='In-shelf')) +
scale_y_discrete(labels=c(
'A'='Interior page feature',
'C'='Interior page line item',
'D'='Front page feature',
'F'='Back page feature',
'H'='Wrap front feature',
'J'='Wrap interior coupon',
'L'='Wrap back feature',
'P'='Interior page coupon',
'X'='Free on interior page',
'Z'='Free on front page, back page, or wrap')) +
labs(title = 'Bubble Map of Average Sales per Promotion by Display and Mailer Locations',
x = "Display Locations",
y = "Mailer Locations") +
theme_minimal()
promotions_modif <- promotions %>% dplyr::filter(display_location != 0, mailer_location!=0)
transactions_modif <- transactions %>%
group_by(product_id, store_id) %>%
summarise(total_sales = sum(sales_value), .groups = 'drop')
main_data <- promotions_modif %>%
inner_join(transactions_modif, by=c('product_id', 'store_id')) %>%
group_by(display_location, mailer_location) %>%
summarise(avg_sales_per_promo = sum(total_sales)/n(),
.groups = 'drop') %>%
dplyr::filter(avg_sales_per_promo > 0)
ggplot(main_data, aes(x = display_location, y = mailer_location, size = avg_sales_per_promo)) +
geom_point(alpha = 0.6, color='blue') +
scale_size(range = c(2, 15), name='Average Sales Per Promotion') +
scale_x_discrete(labels=c(
'1'='Store Front',
'2'='Store Rear',
'3'='Front end cap',
'4'='Mid-aisle end cap',
'5'='Rear end cap',
'6'='Side aisle end cap',
'7'='In-aisle',
'9'='Secondary Location',
'A'='In-shelf')) +
scale_y_discrete(labels=c(
'A'='Interior page feature',
'C'='Interior page line item',
'D'='Front page feature',
'F'='Back page feature',
'H'='Wrap front feature',
'J'='Wrap interior coupon',
'L'='Wrap back feature',
'P'='Interior page coupon',
'X'='Free on interior page',
'Z'='Free on front page, back page, or wrap')) +
labs(title = 'Bubble Map of Average Sales per Promotion by Display and Mailer Locations',
x = "Display Locations",
y = "Mailer Locations") +
theme_minimal()
promotions_modif <- promotions %>% dplyr::filter(display_location != 0, mailer_location!=0)
transactions_modif <- transactions %>%
group_by(product_id, store_id) %>%
summarise(total_sales = sum(sales_value), .groups = 'drop')
main_data <- promotions_modif %>%
inner_join(transactions_modif, by=c('product_id', 'store_id')) %>%
group_by(display_location, mailer_location) %>%
summarise(avg_sales_per_promo = sum(total_sales)/n(),
.groups = 'drop') %>%
dplyr::filter(avg_sales_per_promo > 0)
ggplot(main_data, aes(x = display_location, y = mailer_location, size = avg_sales_per_promo)) +
geom_point(alpha = 0.6, color='blue') +
scale_size(range = c(2, 15), name='Average Sales Per Promotion') +
scale_x_discrete(labels=c(
'1'='Store Front',
'2'='Store Rear',
'3'='Front end cap',
'4'='Mid-aisle end cap',
'5'='Rear end cap',
'6'='Side aisle end cap',
'7'='In-aisle',
'9'='Secondary Location',
'A'='In-shelf')) +
scale_y_discrete(labels=c(
'A'='Interior page feature',
'C'='Interior page line item',
'D'='Front page feature',
'F'='Back page feature',
'H'='Wrap front feature',
'J'='Wrap interior coupon',
'L'='Wrap back feature',
'P'='Interior page coupon',
'X'='Free on interior page',
'Z'='Free on front page, back page, or wrap')) +
labs(title = 'Bubble Map of Average Sales per Promotion by Display and Mailer Locations',
x = "Display Locations",
y = "Mailer Locations") +
theme_minimal()
promotions_modif <- promotions %>% dplyr::filter(display_location != 0, mailer_location!=0)
transactions_modif <- transactions %>%
group_by(product_id, store_id) %>%
summarise(total_sales = sum(sales_value), .groups = 'drop')
main_data <- promotions_modif %>%
inner_join(transactions_modif, by=c('product_id', 'store_id')) %>%
group_by(display_location, mailer_location) %>%
summarise(avg_sales_per_promo = sum(total_sales)/n(),
.groups = 'drop') %>%
dplyr::filter(avg_sales_per_promo > 0)
ggplot(main_data, aes(x = display_location, y = mailer_location, size = avg_sales_per_promo)) +
geom_point(alpha = 0.6, color='blue') +
scale_size(range = c(2, 15), name='Average Sales Per Promotion') +
scale_x_discrete(labels=c(
'1'='Store Front',
'2'='Store Rear',
'3'='Front end cap',
'4'='Mid-aisle end cap',
'5'='Rear end cap',
'6'='Side aisle end cap',
'7'='In-aisle',
'9'='Secondary Location',
'A'='In-shelf')) +
scale_y_discrete(labels=c(
'A'='Interior page feature',
'C'='Interior page line item',
'D'='Front page feature',
'F'='Back page feature',
'H'='Wrap front feature',
'J'='Wrap interior coupon',
'L'='Wrap back feature',
'P'='Interior page coupon',
'X'='Free on interior page',
'Z'='Free on front page, back page, or wrap')) +
labs(title = 'Bubble Map of Average Sales per Promotion by Display and Mailer Locations',
x = "Display Locations",
y = "Mailer Locations") +
theme_minimal()
library(tidyverse)
library(completejourney)
library(scales)
c(promotions, transactions) %<-% get_data(which = 'both', verbose = FALSE)
top_5_category_sales <- transactions %>% left_join(products, by="product_id") %>%
group_by(product_category) %>%
summarise(sales_by_cgry = sum(sales_value), .groups = 'drop') %>%
arrange(desc(sales_by_cgry)) %>%
mutate(rank = row_number()) %>%
dplyr::filter(rank <= 5) %>%
pull(product_category)
main_df <- transactions %>% left_join(products, by='product_id') %>%
group_by(product_category, week) %>%
summarise(sales_by_cgry_week = sum(sales_value), .groups = 'drop') %>%
dplyr::filter(product_category %in% top_5_category_sales)
ggplot(main_df, aes(x=week, y=product_category, fill=sales_by_cgry_week)) +
geom_raster() +
scale_fill_gradientn(colors=c('lightblue','blue'), name = "Total Sales") +
scale_x_continuous(breaks=seq(0,53, by=3)) +
labs(title="Total Sales of Top 5 Product Categories Over Weeks",
subtitle ="The total sales of top 5 categories in the year breaking down in weeks",
x="Week",
y="Product Category") +
theme_minimal()
coupon_redemptions <- coupon_redemptions %>% mutate(dayOfWeek = wday(redemption_date, label=TRUE))
redemp_demo_join <- coupon_redemptions %>%
inner_join(demographics, by="household_id") %>%
select(household_id, campaign_id, redemption_date, household_size, age, income) %>%
mutate(dayOfWeek=wday(redemption_date))
main_data <- redemp_demo_join %>% group_by(dayOfWeek, household_size) %>% count()
custom_colors <- c('1'='blue','2'='red','3'='orange','4'='purple','5+'='darkgreen')
ggplot(main_data) +
geom_line(data = subset(main_data, household_size == '2'),
aes(x=dayOfWeek, y=n, colour = '2'),
linewidth = 1.5,
linetype='dotted') +
geom_line(data = subset(main_data, household_size != '2'),
aes(x=dayOfWeek, y=n, color = household_size)) +
scale_x_continuous(breaks=c(1,2,3,4,5,6,7),
labels = c('Sunday','Monday', 'Tuesday','Wednesday','Thursday','Friday','Saturday')) +
scale_color_manual(values=custom_colors) +
labs(title = "Distribution of Redemptions Over Weeks based off Household Size",
subtitle = 'Household size of 2 has the highest redemptions mostly throughout the week',
x = 'Day of Week',
y = 'Count of Redemptions',
color="Household Size") +
theme_minimal()
promotions_modif <- promotions %>% dplyr::filter(display_location != 0, mailer_location!=0)
transactions_modif <- transactions %>%
group_by(product_id, store_id) %>%
summarise(total_sales = sum(sales_value), .groups = 'drop')
main_data <- promotions_modif %>%
inner_join(transactions_modif, by=c('product_id', 'store_id')) %>%
group_by(display_location, mailer_location) %>%
summarise(avg_sales_per_promo = sum(total_sales)/n(),
.groups = 'drop') %>%
dplyr::filter(avg_sales_per_promo > 0)
ggplot(main_data, aes(x = display_location, y = mailer_location, size = avg_sales_per_promo)) +
geom_point(alpha = 0.6, color='blue') +
scale_size(range = c(2, 15), name='Average Sales Per Promotion') +
scale_x_discrete(labels=c(
'1'='Store Front',
'2'='Store Rear',
'3'='Front end cap',
'4'='Mid-aisle end cap',
'5'='Rear end cap',
'6'='Side aisle end cap',
'7'='In-aisle',
'9'='Secondary Location',
'A'='In-shelf')) +
scale_y_discrete(labels=c(
'A'='Interior page feature',
'C'='Interior page line item',
'D'='Front page feature',
'F'='Back page feature',
'H'='Wrap front feature',
'J'='Wrap interior coupon',
'L'='Wrap back feature',
'P'='Interior page coupon',
'X'='Free on interior page',
'Z'='Free on front page, back page, or wrap')) +
labs(title = 'Bubble Map of Average Sales per Promotion by Display and Mailer Locations',
x = "Display Locations",
y = "Mailer Locations") +
theme_minimal()
library(tidyverse)
library(completejourney)
library(scales)
c(promotions, transactions) %<-% get_data(which = 'both', verbose = FALSE)
top_5_category_sales <- transactions %>% left_join(products, by="product_id") %>%
group_by(product_category) %>%
summarise(sales_by_cgry = sum(sales_value), .groups = 'drop') %>%
arrange(desc(sales_by_cgry)) %>%
mutate(rank = row_number()) %>%
dplyr::filter(rank <= 5) %>%
pull(product_category)
main_df <- transactions %>% left_join(products, by='product_id') %>%
group_by(product_category, week) %>%
summarise(sales_by_cgry_week = sum(sales_value), .groups = 'drop') %>%
dplyr::filter(product_category %in% top_5_category_sales)
ggplot(main_df, aes(x=week, y=product_category, fill=sales_by_cgry_week)) +
geom_raster() +
scale_fill_gradientn(colors=c('lightblue','blue'), name = "Total Sales") +
scale_x_continuous(breaks=seq(0,53, by=3)) +
labs(title="Total Sales of Top 5 Product Categories Over Weeks",
subtitle ="The total sales of top 5 categories in the year breaking down in weeks",
x="Week",
y="Product Category") +
theme_minimal()
coupon_redemptions <- coupon_redemptions %>% mutate(dayOfWeek = wday(redemption_date, label=TRUE))
redemp_demo_join <- coupon_redemptions %>%
inner_join(demographics, by="household_id") %>%
select(household_id, campaign_id, redemption_date, household_size, age, income) %>%
mutate(dayOfWeek=wday(redemption_date))
main_data <- redemp_demo_join %>% group_by(dayOfWeek, household_size) %>% count()
custom_colors <- c('1'='blue','2'='red','3'='orange','4'='purple','5+'='darkgreen')
ggplot(main_data) +
geom_line(data = subset(main_data, household_size == '2'),
aes(x=dayOfWeek, y=n, colour = '2'),
linewidth = 1.5,
linetype='dotted') +
geom_line(data = subset(main_data, household_size != '2'),
aes(x=dayOfWeek, y=n, color = household_size)) +
scale_x_continuous(breaks=c(1,2,3,4,5,6,7),
labels = c('Sunday','Monday', 'Tuesday','Wednesday','Thursday','Friday','Saturday')) +
scale_color_manual(values=custom_colors) +
labs(title = "Distribution of Redemptions Over Weeks based off Household Size",
subtitle = 'Household size of 2 has the highest redemptions mostly throughout the week',
x = 'Day of Week',
y = 'Count of Redemptions',
color="Household Size") +
theme_minimal()
promotions_modif <- promotions %>% dplyr::filter(display_location != 0, mailer_location!=0)
transactions_modif <- transactions %>%
group_by(product_id, store_id) %>%
summarise(total_sales = sum(sales_value), .groups = 'drop')
main_data <- promotions_modif %>%
inner_join(transactions_modif, by=c('product_id', 'store_id')) %>%
group_by(display_location, mailer_location) %>%
summarise(avg_sales_per_promo = sum(total_sales)/n(),
.groups = 'drop') %>%
dplyr::filter(avg_sales_per_promo > 0)
ggplot(main_data, aes(x = display_location, y = mailer_location, size = avg_sales_per_promo)) +
geom_point(alpha = 0.6, color='blue') +
scale_size(range = c(2, 15), name='Average Sales Per Promotion') +
scale_x_discrete(labels=c(
'1'='Store Front',
'2'='Store Rear',
'3'='Front end cap',
'4'='Mid-aisle end cap',
'5'='Rear end cap',
'6'='Side aisle end cap',
'7'='In-aisle',
'9'='Secondary Location',
'A'='In-shelf')) +
scale_y_discrete(labels=c(
'A'='Interior page feature',
'C'='Interior page line item',
'D'='Front page feature',
'F'='Back page feature',
'H'='Wrap front feature',
'J'='Wrap interior coupon',
'L'='Wrap back feature',
'P'='Interior page coupon',
'X'='Free on interior page',
'Z'='Free on front page, back page, or wrap')) +
labs(title = 'Bubble Map of Average Sales per Promotion by Display and Mailer Locations',
x = "Display Locations",
y = "Mailer Locations") +
theme_minimal()
gc()
# Setup -------------------------------------------------------------------
library(tidyverse)
library(here)
library(completejourney)
c(promotions, transactions) %<-% get_data(which = 'both', verbose = FALSE)
view(transactions)
view(campaigns)
view(coupon_redemptions)
view(coupons)
view(products)
view(campaign_descriptions)
view(demographics)
full_coupon_redemp <- coupon_redemptions %>% left_join(campaign_descriptions, by='campaign_id', relationship = 'many-to-many')
full_coupon_redemp
desc(unique(campaign_descriptions$start_date))
unique(campaign_descriptions$start_date)
coupon_redemp_description <- coupon_redemptions %>% left_join(campaign_descriptions, by='campaign_id', relationship = 'many-to-many')
coupon_redemp_description <- coupon_redemptions %>% full_join(campaign_descriptions, by='campaign_id', relationship = 'many-to-many')
coupon_redemp_description
coupon_redemp_coupons <- coupon_redemptions %>% full_join(coupons, by=c('campaign_id', 'coupon_upc'), relationship = 'many-to-many')
coupon_redemptions %>% full_join(coupons, by='campaign_id', relationship = 'many-to-many')
transactions
transactions <- transactions %>% mutate(date = as.Date(transaction_timestamp))
transactions
coupon_redemp_description
coupon_redemp_coupons
trans1 <- transactions
coupons1 <- coupon_redemp_description %>% left_join(coupon_redemp_coupons, by=c('campaign_id','household_id','coupon_upc'))
coupons1 <- coupon_redemp_description %>% left_join(coupon_redemp_coupons,
by=c('campaign_id','household_id','coupon_upc'),
relationship = 'many-to-many')
colSums(is.na(coupons1))
coupons1 <- coupon_redemp_description %>% left_join(coupon_redemp_coupons,
by=c('campaign_id','household_id','coupon_upc','redemption_date'),
relationship = 'many-to-many')
colSums(is.na(coupon_redemp_coupons))
colSums(is.na(coupon_redemp_description))
coupon_redemp_description <- coupon_redemptions %>%
full_join(campaign_descriptions, by='campaign_id', relationship = 'many-to-many') %>%
drop_na(redemption_date)
coupon_redemptions %>%
full_join(campaign_descriptions, by='campaign_id', relationship = 'many-to-many')
coupon_redemp_coupons <- coupon_redemptions %>%
full_join(coupons, by=c('campaign_id', 'coupon_upc'), relationship = 'many-to-many') %>%
drop_na(redemption_date) # matching both coupon_upc and campaign_id
coupons1 <- coupon_redemp_description %>% left_join(coupon_redemp_coupons,
by=c('campaign_id','household_id','coupon_upc','redemption_date'),
relationship = 'many-to-many')
colSums()
colSums(is.na(coupons1))
trans1
trans1 <- trans1
trans1 <- transactions %>% select(household_id, product_id, sales_value:coupon_match_disc, week, date)
trans1
coupons1
trans1 <- transactions %>%
dplyr::filter(retail_disc>0 | coupon_disc>0 | coupon_match_disc>0) %>%
select(household_id, product_id, sales_value:coupon_match_disc, week, date)
trans1
sample1 <- coupons1 %>%
inner_join(trans1, by=c('household_id', 'product_id','')) %>%
dplyr::filter(redemption_date <= end_date && redemption_date >= start_date)
sample1 <- coupons1 %>%
inner_join(trans1, by=c('household_id', 'product_id','')) %>%
dplyr::filter(redemption_date <= end_date & redemption_date >= start_date)
sample1 <- coupons1 %>%
full_join(trans1, by=c('household_id', 'product_id','')) %>%
dplyr::filter(redemption_date <= end_date & redemption_date >= start_date)
sample1 <- coupons1 %>%
inner_join(trans1, by=c('household_id', 'product_id')) %>%
dplyr::filter(redemption_date <= end_date & redemption_date >= start_date)
sample1 <- coupons1 %>%
inner_join(trans1, by=c('household_id', 'product_id'), relationship = 'many-to-many') %>%
dplyr::filter(redemption_date <= end_date & redemption_date >= start_date)
coupon_redemptions
colSums(is.na(sample1))
library(completejourney)
c(promotions, transactions) %<-% get_data(which = 'both', verbose = FALSE)
view(transactions)
view(campaigns)
view(coupon_redemptions)
view(coupons)
view(products)
view(campaign_descriptions)
view(demographics)
transactions <- transactions %>% mutate(date = as.Date(transaction_timestamp))
trans1 <- transactions %>%
dplyr::filter(retail_disc>0 | coupon_disc>0 | coupon_match_disc>0) %>%
select(household_id, product_id, sales_value:coupon_match_disc, week, date)
# 1. Join coupon_redemptions & campaign_descriptions => have the start and end date of the campaign.
coupon_redemp_description <- coupon_redemptions %>%
full_join(campaign_descriptions, by='campaign_id', relationship = 'many-to-many') %>%
drop_na(redemption_date)
# 2. Join coupon_redemptions & coupons => Understand which product_ids are associated with each campaign.
coupon_redemp_coupons <- coupon_redemptions %>%
full_join(coupons, by=c('campaign_id', 'coupon_upc'), relationship = 'many-to-many') %>%
drop_na(redemption_date) # matching both coupon_upc and campaign_id
# 3. Join 1. and 2.
coupons1 <- coupon_redemp_description %>% left_join(coupon_redemp_coupons,
by=c('campaign_id','household_id','coupon_upc','redemption_date'),
relationship = 'many-to-many')
# 4. Join 3. & transactions
sample1 <- coupons1 %>%
inner_join(trans1, by=c('household_id', 'product_id'), relationship = 'many-to-many') %>%
dplyr::filter(redemption_date <= end_date & redemption_date >= start_date) # need to confirm
x <- c(8, 3, -2, 5)
if (x < 0) {
print("x contains a negative number")
}
library(tidyverse)
library(completejourney)
library(scales)
c(promotions, transactions) %<-% get_data(which = 'both', verbose = FALSE)
top_5_category_sales <- transactions %>% left_join(products, by="product_id") %>%
group_by(product_category) %>%
summarise(sales_by_cgry = sum(sales_value), .groups = 'drop') %>%
arrange(desc(sales_by_cgry)) %>%
mutate(rank = row_number()) %>%
dplyr::filter(rank <= 5) %>%
pull(product_category)
main_df <- transactions %>% left_join(products, by='product_id') %>%
group_by(product_category, week) %>%
summarise(sales_by_cgry_week = sum(sales_value), .groups = 'drop') %>%
dplyr::filter(product_category %in% top_5_category_sales)
ggplot(main_df, aes(x=week, y=product_category, fill=sales_by_cgry_week)) +
geom_raster() +
scale_fill_gradientn(colors=c('lightblue','blue'), name = "Total Sales") +
scale_x_continuous(breaks=seq(0,53, by=3)) +
labs(title="Total Sales of Top 5 Product Categories Over Weeks",
subtitle ="The total sales of top 5 categories in the year breaking down in weeks",
x="Week",
y="Product Category") +
theme_minimal()
coupon_redemptions <- coupon_redemptions %>% mutate(dayOfWeek = wday(redemption_date, label=TRUE))
redemp_demo_join <- coupon_redemptions %>%
inner_join(demographics, by="household_id") %>%
>>>>>>> baeb6fe2aaaddc27ef6a20b88e9db2bef7e3906a
select(household_id, campaign_id, redemption_date, household_size, age, income) %>%
mutate(dayOfWeek=wday(redemption_date))
main_data <- redemp_demo_join %>% group_by(dayOfWeek, household_size) %>% count()
custom_colors <- c('1'='blue','2'='red','3'='orange','4'='purple','5+'='darkgreen')
ggplot(main_data) +
geom_line(data = subset(main_data, household_size == '2'),
aes(x=dayOfWeek, y=n, colour = '2'),
linewidth = 1.5,
linetype='dotted') +
geom_line(data = subset(main_data, household_size != '2'),
aes(x=dayOfWeek, y=n, color = household_size)) +
scale_x_continuous(breaks=c(1,2,3,4,5,6,7),
labels = c('Sunday','Monday', 'Tuesday','Wednesday','Thursday','Friday','Saturday')) +
scale_color_manual(values=custom_colors) +
labs(title = "Distribution of Redemptions Over Weeks based off Household Size",
subtitle = 'Household size of 2 has the highest redemptions mostly throughout the week',
x = 'Day of Week',
y = 'Count of Redemptions',
color="Household Size") +
theme_minimal()
promotions_modif <- promotions %>% dplyr::filter(display_location != 0, mailer_location!=0)
transactions_modif <- transactions %>%
group_by(product_id, store_id) %>%
summarise(total_sales = sum(sales_value), .groups = 'drop')
main_data <- promotions_modif %>%
inner_join(transactions_modif, by=c('product_id', 'store_id')) %>%
group_by(display_location, mailer_location) %>%
summarise(avg_sales_per_promo = sum(total_sales)/n(),
.groups = 'drop') %>%
dplyr::filter(avg_sales_per_promo > 0)
ggplot(main_data, aes(x = display_location, y = mailer_location, size = avg_sales_per_promo)) +
geom_point(alpha = 0.6, color='blue') +
scale_size(range = c(2, 15), name='Average Sales Per Promotion') +
scale_x_discrete(labels=c(
'1'='Store Front',
'2'='Store Rear',
'3'='Front end cap',
'4'='Mid-aisle end cap',
'5'='Rear end cap',
'6'='Side aisle end cap',
'7'='In-aisle',
'9'='Secondary Location',
'A'='In-shelf')) +
scale_y_discrete(labels=c(
'A'='Interior page feature',
'C'='Interior page line item',
'D'='Front page feature',
'F'='Back page feature',
'H'='Wrap front feature',
'J'='Wrap interior coupon',
'L'='Wrap back feature',
'P'='Interior page coupon',
'X'='Free on interior page',
'Z'='Free on front page, back page, or wrap')) +
labs(title = 'Bubble Map of Average Sales per Promotion by Display and Mailer Locations',
x = "Display Locations",
y = "Mailer Locations") +
theme_minimal()
```{r setup}
library(tidyverse)
library(tidyverse)
x <- c(8,2,-2)
if (x < 0) {
print('there')
}
if (any(x < 0) {
cat('there')
<<<<<<< HEAD
# Setup -------------------------------------------------------------------
library(tidyverse)
library(here)
library(completejourney)
c(promotions, transactions) %<-% get_data(which = 'both', verbose = FALSE)
view(transactions)
view(campaigns)
view(coupon_redemptions)
view(coupons)
view(products)
view(campaign_descriptions)
view(demographics)
promotions
transactions <- transactions %>% mutate(date = as.Date(transaction_timestamp))
trans1 <- transactions %>%
dplyr::filter(retail_disc>0 | coupon_disc>0 | coupon_match_disc>0) %>%
select(household_id, product_id, sales_value:coupon_match_disc, week, date)
# 1. Join coupon_redemptions & campaign_descriptions => have the start and end date of the campaign.
coupon_redemp_description <- coupon_redemptions %>%
full_join(campaign_descriptions, by='campaign_id', relationship = 'many-to-many') %>%
drop_na(redemption_date)
view(coupon_redemp_description)
# 1. Join coupon_redemptions & campaign_descriptions => have the start and end date of the campaign.
coupon_redemp_description <- coupon_redemptions %>%
full_join(campaign_descriptions, by = 'campaign_id') %>%
dplyr::filter(redemption_date >= start_date & redemption_date <= end_date) %>%
drop_na(redemption_date)
view(coupon_redemp_description)
sample <- coupon_redemptions %>% left_join(coupons, by='campaign_id', relationship = 'many-to-many')
sample
sample %>% dplyr::filter(coupon_upc.x != coupon_upc.y)
coupons
coupon_redemptions
sample <- coupon_redemptions %>% left_join(coupons, by=c('campaign_id','coupon_upc'), relationship = 'many-to-many')
sample
coupons
# 2. Join coupon_redemptions & coupons => Understand which product_ids are associated with each campaign.
coupon_redemp_coupons <- coupon_redemptions %>%
left_join(coupons, by=c('campaign_id', 'coupon_upc'), relationship = 'many-to-many') %>%
drop_na(redemption_date) # matching both coupon_upc and campaign_id
view(coupon_redemp_coupons)
# 3. Join 1. and 2.
coupons1 <- coupon_redemp_description %>% left_join(coupon_redemp_coupons,
by=c('campaign_id','household_id','coupon_upc','redemption_date'),
relationship = 'many-to-many')
trans1
view(coupons1)
# 4. Join 3. & transactions
sample1 <- coupons1 %>%
inner_join(trans1, by=c('household_id', 'product_id'), relationship = 'many-to-many') %>%
dplyr::filter(redemption_date <= end_date & redemption_date >= start_date) # need to confirm
sample1
# 4. Join 3. & transactions
transWithRedemptions <- coupons1 %>%
inner_join(trans1, by=c('household_id', 'product_id'), relationship = 'many-to-many') %>%
dplyr::filter(redemption_date <= end_date & redemption_date >= start_date) # need to confirm
view(transWithRedemptions)
promotions
promotions %>% group_by(product_id) %>% summarise(unique_location = n_distinct(display_location))
promotions %>% group_by(product_id) %>% summarise(unique_location = n_distinct(display_location)) %>% dplyr::filter(unique_location > 1) %>% n()
promotions %>% group_by(product_id) %>% summarise(unique_location = n_distinct(display_location)) %>% dplyr::filter(unique_location > 1)
# a. Customer is likely to buy stuff at store-front event w/o coupons --------
# Total sales from transactions with redemptions, grouped by product_id
transWithRedemptions_groupedByProductId <- transWithRedemptions %>%
group_by(product_id) %>%
summarise(total_sales = sum(sales_value))
# a. Customer is likely to buy stuff at store-front event w/o coupons --------
# Total sales from transactions with redemptions, grouped by product_id
transWithRedemptions_groupedByProductId <- transWithRedemptions %>%
group_by(product_id) %>%
summarise(total_sales = sum(sales_value), .groups = 'drop')
transWithRedemptions_groupedByProductId
# a. Customer is likely to buy stuff at store-front event w/o coupons --------
# Total sales from transactions with redemptions, grouped by product_id
transWithRedemptions_groupedByProductId <- transWithRedemptions %>%
group_by(product_id) %>%
summarise(total_sales = sum(sales_value), .groups = 'drop') %>%
arrange(desc(total_sales))
promotions
promotions %>% group_by(product_id) %>% summarise(unique_location = n_distinct(mailer_location)) %>% dplyr::filter(unique_location > 1) %>% arrange(desc(unique_location))
unique(promotions$store_id)
product_info_id <- transWithRedemptions_groupedByProductId$product_id
filtered_promotions <- promotions %>%
group_by(store_id) %>%
filter(all(product_info_id %in% product_id)) %>%
ungroup()
filtered_promotions <- promotions %>%
group_by(store_id) %>%
dplyr::filter(all(product_info_id %in% product_id)) %>%
ungroup()
filtered_promotions
promotions1 <- promotions %>% dplyr::filter(!is.na(display_location))
promotions1
promotions
promotions1 <- promotions %>% dplyr::filter(display_location != 0)
promotions1
filtered_promotions <- promotions1 %>%
group_by(store_id) %>%
dplyr::filter(all(product_info_id %in% product_id)) %>%
ungroup()
filtered_promotions
promotions1 %>% group_by(product_id) %>% summarise(unique_location = n_distinct(display_location)) %>% dplyr::filter(unique_location > 1) %>% arrange(desc(unique_location))
promotions1 %>% dplyr::filter(product_id == 1000050) %>% select(display_location)
promotions1 %>% dplyr::filter(product_id == 1000050) %>% select(display_location) %>% n_distinct()
promotions1 %>% dplyr::filter(product_id == 1000050) %>% select(display_location) %>% unique(display_location)
promotions1 %>% dplyr::filter(product_id == 1000050) %>% select(display_location) %>% unique()
promotions1 <- promotions %>% dplyr::filter(display_location != 0 | mailer_location != 0)
promotions1 %>% group_by(product_id) %>% filter(all(products_info_id %in% product_id))
promotions1 %>% group_by(product_id) %>% dplyr:filter(all(products_info_id %in% product_id))
promotions1 %>% group_by(product_id) %>% dplyr::filter(all(products_info_id %in% product_id))
promotions1 %>% group_by(product_id) %>% dplyr::filter(all(product_info_id %in% product_id))
promotions1 %>% dplyr::filter(product_id %in% product_info_id)
# Get rid of location 0 for display_location
promotions_displayNot0 <- promotions %>% dplyr::filter(display_location)
# Get rid of location 0 for display_location
promotions_displayNot0 <- promotions %>% dplyr::filter(display_location != 0)
# Get rid of location 0 for mailer_location
promotions_mailerNot0 <- promotions %>% dplyr::filter(mailer_location != 0)
transWithRedemptions_groupedByProductId
product_info_id <- transWithRedemptions_groupedByProductId %>% select(product_id) %>% unique()
product_info_id
product_info_id <- unique(transWithRedemptions_groupedByProductId$product_id)
product_info_id
length(product_info_id)
sample1 <- promotions_displayNot0 %>% dplyr::filter(product_id %in% product_info_id)
sample1
# Get rid of location 0 for display_location
promotions_displayNot0 <- promotions %>% dplyr::filter(display_location != 0) %>% select(~mailer_location)
# Get rid of location 0 for display_location
promotions_displayNot0 <- promotions %>%
dplyr::filter(display_location != 0) %>%
select(-mailer_location)
sample1 <- promotions_displayNot0 %>% dplyr::filter(product_id %in% product_info_id)
sample1
transWithRedemptions_groupedByProductId
sample1 <- promotions_displayNot0 %>%
dplyr::filter(product_id %in% product_info_id) %>%
left_join(transWithRedemptions_groupedByProductId, by='product_id', relationship = 'many-to-many')
sample1
sample1 <- promotions_displayNot0 %>%
dplyr::filter(product_id %in% product_info_id) %>%
left_join(transWithRedemptions_groupedByProductId, by='product_id', relationship = 'many-to-many') %>%
select(-week)
sample1
products
sample1 <- promotions_displayNot0 %>%
dplyr::filter(product_id %in% product_info_id) %>%
left_join(transWithRedemptions_groupedByProductId, by='product_id', relationship = 'many-to-many') %>%
select(-week) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size'))
sample1
colSums(is.na(sample1))
sample1
transWithRedemptions_groupedByProductId_mailerLocation <- promotions_mailerNot0 %>%
dplyr::filter(product_id %in% product_info_id) %>%
left_join(transWithRedemptions_groupedByProductId, by='product_id', relationship = 'many-to-many') %>%
select(-week) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size')) %>%
# left join the coupon redemptions with coupon to get only product_id that is redeemed
sample <- coupon_redemptions %>% left_join(coupons, by=c('coupon_upc','campaign_id'), relationship = 'many-to-many')
transWithRedemptions_groupedByProductId_mailerLocation <- promotions_mailerNot0 %>%
dplyr::filter(product_id %in% product_info_id) %>%
left_join(transWithRedemptions_groupedByProductId, by='product_id', relationship = 'many-to-many') %>%
select(-week) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size')) %>%
# left join the coupon redemptions with coupon to get only product_id that is redeemed
sample <- coupon_redemptions %>% left_join(coupons, by=c('coupon_upc','campaign_id'), relationship = 'many-to-many')
transWithRedemptions_groupedByProductId_displayLocation <- promotions_displayNot0 %>%
dplyr::filter(product_id %in% product_info_id) %>%
left_join(transWithRedemptions_groupedByProductId, by='product_id', relationship = 'many-to-many') %>%
select(-week) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size'))
transWithRedemptions_groupedByProductId_mailerLocation <- promotions_mailerNot0 %>%
dplyr::filter(product_id %in% product_info_id) %>%
left_join(transWithRedemptions_groupedByProductId, by='product_id', relationship = 'many-to-many') %>%
select(-week) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size'))
type(transWithRedemptions_groupedByProductId_mailerLocation)
typeof(transWithRedemptions_groupedByProductId_mailerLocation)
transWithRedemptions_groupedByProductId_mailerLocation
transWithRedemptions_groupedByProductId
transWithRedemptions_groupedByProductId_displayLocation
library(readr)
write_csv(transWithRedemptions_groupedByProductId_mailerLocation, "Transactions W/ Redemptions - Mailer Location.csv")
write_csv(transWithRedemptions_groupedByProductId_mailerLocation, "Transactions_W/_Redemptions__Mailer_Location.csv")
getwd()
write_csv(transWithRedemptions_groupedByProductId_mailerLocation, "Transactions_W_Redemptions_Mailer_Location.csv")
write_csv(transWithRedemptions_groupedByProductId_displayLocation, "Transactions_W_Redemptions_Display_Location.csv")
# d. Customer doesn’t use the coupons if products are not shown in mail (mailer_location).  ----------------
# Promotions with display_location = 0, which is not displayed
promotions_displayNot0 <- promotions %>%
dplyr::filter(display_location == 0) %>%
select(-mailer_location)
# d. Customer doesn’t use the coupons if products are not shown in mail (mailer_location).  ----------------
# Promotions with display_location = 0, which is not displayed
promotions_displayIs0 <- promotions %>%
dplyr::filter(display_location == 0) %>%
select(-mailer_location)
promotions_displayIs0
transWithRedemptions_groupedByProductId_displayLocation <- promotions_displayIs0 %>%
dplyr::filter(product_id %in% product_info_id) %>%
left_join(transWithRedemptions_groupedByProductId, by='product_id', relationship = 'many-to-many') %>%
select(-week) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size'))
transWithRedemptions_groupedByProductId_displayLocationIs0 <- promotions_displayIs0 %>%
dplyr::filter(product_id %in% product_info_id) %>%
left_join(transWithRedemptions_groupedByProductId, by='product_id', relationship = 'many-to-many') %>%
select(-week) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size'))
transWithRedemptions_groupedByProductId_displayLocationIs0
transWithRedemptions_groupedByProductId_mailerLocationIs0 <- promotions_mailerIs0 %>%
dplyr::filter(product_id %in% product_info_id) %>%
left_join(transWithRedemptions_groupedByProductId, by='product_id', relationship = 'many-to-many') %>%
select(-week) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size'))
# Promotions with mailer_location = 0, which is not displayed
promotions_mailerIs0 <- promotions %>%
dplyr::filter(mailer_location == 0) %>%
select(-display_location)
transWithRedemptions_groupedByProductId_mailerLocationIs0 <- promotions_mailerIs0 %>%
dplyr::filter(product_id %in% product_info_id) %>%
left_join(transWithRedemptions_groupedByProductId, by='product_id', relationship = 'many-to-many') %>%
select(-week) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size'))
transWithRedemptions_groupedByProductId_mailerLocationIs0
# Export as csv files
write_csv(transWithRedemptions_groupedByProductId_displayLocationIs0, 'Transactions_W_Redemptions_Not_Displayed.csv')
write_csv(transWithRedemptions_groupedByProductId_mailerLocationIs0, 'Transactions_W_Redemptions_Not_Mailed.csv')
sample1 <- read_csv('Transactions_W_Redemptions_Not_Mailed.csv')
sample1
library(tidyverse)
library(here)
library(completejourney)
library(readr)
c(promotions, transactions) %<-% get_data(which = 'both', verbose = FALSE)
view(transactions)
view(campaigns)
view(coupon_redemptions)
view(coupons)
view(products)
view(campaign_descriptions)
view(demographics)
trans1 <- transactions %>%
dplyr::filter(retail_disc>0 | coupon_disc>0 | coupon_match_disc>0) %>%
select(household_id, store_id, product_id, sales_value:coupon_match_disc, week, date)
transactions <- transactions %>% mutate(date = as.Date(transaction_timestamp))
trans1 <- transactions %>%
dplyr::filter(retail_disc>0 | coupon_disc>0 | coupon_match_disc>0) %>%
select(household_id, store_id, product_id, sales_value:coupon_match_disc, week, date)
view(trans1)
# 1. Join coupon_redemptions & campaign_descriptions => have the start and end date of the campaign.
coupon_redemp_description <- coupon_redemptions %>%
full_join(campaign_descriptions, by = 'campaign_id') %>%
drop_na(redemption_date)
# 2. Join coupon_redemptions & coupons => Understand which product_ids are associated with each campaign.
coupon_redemp_coupons <- coupon_redemptions %>%
left_join(coupons, by=c('campaign_id', 'coupon_upc'), relationship = 'many-to-many') %>%
drop_na(redemption_date) # matching both coupon_upc and campaign_id
view(coupon_redemp_description)
view(coupon_redemp_coupons)
view(coupons1)
# 3. Join 1. and 2.
coupons1 <- coupon_redemp_description %>%
left_join(coupon_redemp_coupons,
by=c('campaign_id','household_id','coupon_upc','redemption_date'),
relationship = 'many-to-many')
view(coupons)
view(coupons1)
promotions
trans1
# 4. Join 3. & transactions
transWithRedemptions <- coupons1 %>%
inner_join(trans1, by=c('household_id', 'product_id'), relationship = 'many-to-many') %>%
dplyr::filter(redemption_date <= end_date & redemption_date >= start_date) # need to confirm
transWithRedemptions
view(transWithRedemptions)
promotions1 <- promotions %>% dplyr::filter(display_location != 0 | mailer_location != 0)
# a. Customer is likely to buy stuff at store-front event w/o coupons --------
# Total sales from transactions with redemption, grouped by product_id
transWithRedemptions_groupedByProductId <- transWithRedemptions %>%
group_by(product_id, store_id) %>%
summarise(total_sales = sum(sales_value), .groups = 'drop') %>%
arrange(desc(total_sales))
transWithRedemptions_groupedByProductId
# a. Customer is likely to buy stuff at store-front event w/o coupons --------
# Total sales from transactions with redemption, grouped by product_id
transWithRedemptions_groupedByProductStoreId <- transWithRedemptions %>%
group_by(product_id, store_id) %>%
summarise(total_sales = sum(sales_value), .groups = 'drop') %>%
arrange(desc(total_sales))
product_info_id <- unique(transWithRedemptions_groupedByProductStoreId$product_id)
store_info_id <- unique(transWithRedemptions_groupedByProductStoreId$store_id)
# Get rid of location 0 for display_location
promotions_displayNot0 <- promotions %>%
dplyr::filter(display_location != 0) %>%
select(-mailer_location)
products
transWithRedemptions_groupedByProductId_displayLocation <- promotions_displayNot0 %>%
dplyr::filter((product_id %in% product_info_id) && (store_id %in% store_info_id)) %>%
left_join(transWithRedemptions_groupedByProductStoreId, by=c('product_id', 'store_id'), relationship = 'many-to-many') %>%
select(-week) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size'))
transWithRedemptions_groupedByProductId_displayLocation <- promotions_displayNot0 %>%
dplyr::filter((product_id %in% product_info_id) & (store_id %in% store_info_id)) %>%
left_join(transWithRedemptions_groupedByProductStoreId, by=c('product_id', 'store_id'), relationship = 'many-to-many') %>%
select(-week) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size'))
transWithRedemptions_groupedByProductId_displayLocation
promotions_displayNot0
transWithRedemptions_groupedByProductStoreId
promotions_displayNot0 %>%
dplyr::filter((product_id %in% product_info_id) & (store_id %in% store_info_id)) %>%
full_join(transWithRedemptions_groupedByProductStoreId, by=c('product_id', 'store_id'), relationship = 'many-to-many') %>%
select(-week)
view( promotions_displayNot0 %>%
dplyr::filter((product_id %in% product_info_id) & (store_id %in% store_info_id)) %>%
full_join(transWithRedemptions_groupedByProductStoreId, by=c('product_id', 'store_id'), relationship = 'many-to-many') %>%
select(-week))
sample <-  promotions_displayNot0 %>%
dplyr::filter((product_id %in% product_info_id) & (store_id %in% store_info_id)) %>%
full_join(transWithRedemptions_groupedByProductStoreId, by=c('product_id', 'store_id'), relationship = 'many-to-many') %>%
select(-week)
colSums(is.na(sample))
promotions_displayNot0 %>%
dplyr::filter((product_id %in% product_info_id) & (store_id %in% store_info_id)) %>%
full_join(transWithRedemptions_groupedByProductStoreId, by=c('product_id', 'store_id'), relationship = 'many-to-many') %>%
select(-week) %>% drop_na(total_sales)
sample1 <- promotions_displayNot0 %>%
dplyr::filter((product_id %in% product_info_id) & (store_id %in% store_info_id)) %>%
full_join(transWithRedemptions_groupedByProductStoreId, by=c('product_id', 'store_id'), relationship = 'many-to-many') %>%
select(-week) %>% drop_na(total_sales) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size'))
colSums(is.na(sample1))
unique(products$product_id) %in% unique(promotions$product_id)
transWithRedemptions_groupedByProductId_displayLocation <- promotions_displayNot0 %>%
dplyr::filter((product_id %in% product_info_id) & (store_id %in% store_info_id)) %>%
full_join(transWithRedemptions_groupedByProductStoreId, by=c('product_id', 'store_id'), relationship = 'many-to-many') %>%
select(-week) %>%
drop_na(total_sales) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size')) %>%
drop_na(display_location)
transWithRedemptions_groupedByProductId_displayLocation
colSums(is.na(transWithRedemptions_groupedByProductId_displayLocation))
# Get rid of location 0 for mailer_location
promotions_mailerNot0 <- promotions %>%
dplyr::filter(mailer_location != 0) %>%
select(-display_location)
transWithRedemptions_groupedByProductId_mailerLocation <- promotions_mailerNot0 %>%
dplyr::filter(product_id %in% product_info_id & store_id %in% store_info_id) %>%
left_join(transWithRedemptions_groupedByProductId, by=c('product_id', 'store_id'), relationship = 'many-to-many') %>%
select(-week) %>%
drop_na(total_sales) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size'))
transWithRedemptions_groupedByProductId_mailerLocation <- promotions_mailerNot0 %>%
dplyr::filter(product_id %in% product_info_id & store_id %in% store_info_id) %>%
left_join(transWithRedemptions_groupedByProductId, by=c('product_id', 'store_id'), relationship = 'many-to-many') %>%
select(-week) %>%
drop_na(total_sales) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size')) %>%
drop_na(mailer_location)
transWithRedemptions_groupedByProductId_mailerLocation
colSums()
colSums(is.na(transWithRedemptions_groupedByProductId_mailerLocation))
transWithRedemptions_groupedByProductId_mailerLocation <- promotions_mailerNot0 %>%
dplyr::filter(product_id %in% product_info_id & store_id %in% store_info_id) %>%
left_join(transWithRedemptions_groupedByProductId, by=c('product_id', 'store_id'), relationship = 'many-to-many') %>%
select(-week) %>%
drop_na(total_sales) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size')) %>%
drop_na(mailer_location) %>%
replace_na(product_category, 'None')
transWithRedemptions_groupedByProductId_mailerLocation <- promotions_mailerNot0 %>%
dplyr::filter(product_id %in% product_info_id & store_id %in% store_info_id) %>%
left_join(transWithRedemptions_groupedByProductId, by=c('product_id', 'store_id'), relationship = 'many-to-many') %>%
select(-week) %>%
drop_na(total_sales) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size')) %>%
drop_na(mailer_location) %>%
mutate(product_category = replace_na(product_category, 'None'))
colSums(is.na(transWithRedemptions_groupedByProductId_mailerLocation))
llibrary(tidyverse)
library(tidyverse)
library(here)
library(completejourney)
library(readr)
sample <- read_csv('data/Transactions_W_Redemptions_Not_Mailed.csv')
view(sample)
# d. Customer doesn’t use the coupons if products are not shown in mail (mailer_location) ----------------
# Promotions with display_location = 0, which is not displayed
promotions_displayIs0 <- promotions %>%
dplyr::filter(display_location == 0) %>%
select(-mailer_location)
products
transWithRedemptions_groupedByProductId_displayLocationIs0 <- promotions_displayIs0 %>%
dplyr::filter(product_id %in% product_info_id & store_id %in% store_info_id) %>%
left_join(transWithRedemptions_groupedByProductStoreId, by=c('product_id', 'store_id'), relationship = 'many-to-many') %>%
select(-week) %>%
drop_na(total_sales) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size')) %>%
drop_na(display_location)
# Export as csv file
write_csv(transWithRedemptions_groupedByProductId_mailerLocation, "Transactions_W_Redemptions_Mailer_Location.csv")
write_csv(transWithRedemptions_groupedByProductId_displayLocation, "Transactions_W_Redemptions_Display_Location.csv")
transWithRedemptions_groupedByProductId_displayLocationIs0
transWithRedemptions_groupedByProductId_mailerLocationIs0 <- promotions_mailerIs0 %>%
dplyr::filter(product_id %in% product_info_id & store_id %in% store_info_id) %>%
left_join(transWithRedemptions_groupedByProductStoreId, by=c('product_id', 'store_id'), relationship = 'many-to-many') %>%
select(-week) %>%
drop_na(total_sales) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size')) %>%
drop_na(mailer_location)
# Promotions with mailer_location = 0, which is not displayed
promotions_mailerIs0 <- promotions %>%
dplyr::filter(mailer_location == 0) %>%
select(-display_location)
transWithRedemptions_groupedByProductId_mailerLocationIs0 <- promotions_mailerIs0 %>%
dplyr::filter(product_id %in% product_info_id & store_id %in% store_info_id) %>%
left_join(transWithRedemptions_groupedByProductStoreId, by=c('product_id', 'store_id'), relationship = 'many-to-many') %>%
select(-week) %>%
drop_na(total_sales) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size')) %>%
drop_na(mailer_location)
# Export as csv files
write_csv(transWithRedemptions_groupedByProductId_displayLocationIs0, 'Transactions_W_Redemptions_Not_Displayed.csv')
write_csv(transWithRedemptions_groupedByProductId_mailerLocationIs0, 'Transactions_W_Redemptions_Not_Mailed.csv')
=======
>>>>>>> baeb6fe2aaaddc27ef6a20b88e9db2bef7e3906a
