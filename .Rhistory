select(-c(display_location, week)) %>%
dplyr::distinct(product_id, store_id, mailer_location, .keep_all = TRUE) %>%
dplyr::filter(mailer_location != 0)
# Join mailer location to transactions with redemption by keys: product_id and store_id
transWithRedemptions_mailerLocation <- promos_mailer %>%
inner_join(transWithRedemptions_groupedByProductStoreId, by=c('product_id', 'store_id')) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size'))
print(paste("Structure of transactions with redemptions, display location ver:"))
print(transWithRedemptions_displayLocation, n = 5)
print(paste("Structure of transactions with redemptions, mailer location ver:"))
print(transWithRedemptions_mailerLocation, n = 5)
# Promotions with display_location = 0, which is not displayed
promos_display0 <- promotions %>%
select(-c(mailer_location, week)) %>%
dplyr::filter(display_location == 0) %>%
dplyr::distinct(product_id, store_id, .keep_all = TRUE)
# Join display location = 0 to transactions with redemption by keys product_id and store_id
transWithRedemptions_displayLocationIs0 <- transWithRedemptions_grouped %>%
semi_join(promos_display0, by = c("product_id", "store_id")) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size'))
# Promotions with mailer_location = 0, which is not displayed
promos_mailer0 <- promotions %>%
select(-c(display_location, week)) %>%
dplyr::filter(mailer_location == 0) %>%
dplyr::distinct(product_id, store_id, .keep_all = TRUE)
# Join mailer location to transactions with redemptions by keys product_id and store_id
transWithRedemptions_mailerLocationIs0 <- transWithRedemptions_grouped %>%
semi_join(promos_mailer0, by = c("product_id", "store_id")) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size'))
print(paste("Structure of transactions with redemptions with no display location:"))
print(transWithRedemptions_displayLocationIs0, n = 5)
print(paste("Structure of transactions with redemptions with no mailer location:"))
print(transWithRedemptions_mailerLocationIs0, n = 5)
full_transactions <- transWithRedemptions
trans_w_display <- transWithRedemptions_displayLocation
trans_w_mailer <- transWithRedemptions_mailerLocation
trans_w_display0 <- transWithRedemptions_displayLocationIs0
trans_w_mailer0 <- transWithRedemptions_mailerLocationIs0
summary_transactions <- full_transactions %>%
group_by(campaign_type) %>%
summarise(
total_sales = sum(sales_value),
count_type = n()
)
ggplot(data = summary_transactions, aes(x = campaign_type)) +
geom_col(aes(y = count_type, fill = 'Count of campaign type'), width = 0.5) +
geom_line(aes(y = total_sales, color = 'Total Sales'), group = 1) +
geom_point(aes(y = total_sales, color = 'Total Sales'), size = 3.0) +
scale_y_continuous(
name = "Count of campaign type",
breaks = seq(0, max(summary_transactions$total_sales) + 1, by = 400),
sec.axis = sec_axis(~.,
name = "Total Sales",
breaks = seq(0, max(summary_transactions$total_sales) + 1, by = 400),
labels = scales::dollar)
) +
labs(x = 'Campaign Types', title = "Total Sales Value and Count of Redemptions Per Campaign Type") +
scale_fill_manual(name = '', values = c("Count of campaign type" = "lightblue")) +
scale_color_manual(name = '', values = c("Total Sales Value" = 'red')) +
theme_classic() +
theme(plot.title = element_text(size = 20),
axis.title.x = element_text(margin = margin(t = 10), size = 14),
axis.title.y.left = element_text(margin = margin(r = 10), size = 14),
axis.title.y.right = element_text(margin = margin(l = 10), size = 14),
legend.position = 'bottom',
legend.title = element_text(size = 14),
legend.text = element_text(size = 14)
) +
annotate("text", x = "Type A", y = 7603, label = "Exceptionally High", color = "blue", size = 6, vjust = -1)
sample <- full_transactions %>%
group_by(product_id, campaign_type) %>%
summarise(total = sum(sales_value), .groups="drop") %>%
left_join(products, by="product_id") %>%
select(campaign_type, department, total) %>%
group_by(campaign_type, department) %>%
summarise(total_new = sum(total), .groups="drop")
ggplot(data = sample, aes(x = campaign_type, y = department, fill = total_new)) +
geom_tile() +
scale_fill_gradient2(low="white",
mid="lightblue",
high="blue",
name = "Sales Value",
labels = label_dollar()) +
geom_text(aes(label = label_dollar()(total_new)), color="black", size=4) +
theme_classic() +
labs(title = "Distribution of Sales Value by Campaign Types and Departments",
x = "Campaign Types",
y = "Deparments") +
theme(plot.title = element_text(size = 20),
axis.title.x = element_text(margin = margin(t = 10), size = 14),
axis.title.y = element_text(margin = margin(r = 10), size = 14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14)
)
source("C:/Users/vopq/OneDrive - University of Cincinnati/Fall 2024/BANA4080/BANA4080_midterm_project/Report.Rmd")
source("C:/Users/vopq/OneDrive - University of Cincinnati/Fall 2024/BANA4080/BANA4080_midterm_project/Report.Rmd")
library(tidyverse)               # collection of R packages for data manipulation and visualization
library(here)                    # simplifies file path management in projects
library(lubridate)               # tools for working with date and time data
library(ggplot2)                 # data visualization using "Grammar of Graphics"
library(readr)                   # fast reading and writing of data files
library(scales)
library(completejourney)
c(promotions, transactions) %<-% get_data(which = 'both', verbose = FALSE)
# Extract the date for transactions and change data type for product_id
transactions <- transactions %>% mutate(date = as.Date(transaction_timestamp))
transactions$product_id <- as.double(transactions$product_id)
promotions$product_id <- as.double(promotions$product_id)
products$product_id <- as.double(products$product_id)
coupons$product_id <- as.double(coupons$product_id)
# Vectors of display and mailer locations to actual names
display_location_labels <- c("0"="No display",
"1"="Store front",
"2"="Store rear",
"3"="Front end cap",
"4"="Mid-aisle end cap",
"5"="Rear end cap",
"6"="Side aisle end cap",
"7"="In-aisle",
"9"="Secondary location display",
"A"="In-shelf")
mailer_location_labels <- c("0"="Not on ad",
"A"="Interior page feature",
"C"="Interior page line item",
"D"="Front page feature",
"F"="Back page feature",
"H"="Wrap front feature",
"J"="Wrap interior coupon",
"L"="Wrap back feature",
"P"="Interior page coupon",
"X"="Free on interior page",
"Z"="Free on front page/back page/or wrap")
# Select only relevant columns in transactions
trans1 <- transactions %>%
dplyr::filter(retail_disc>0 | coupon_disc>0 | coupon_match_disc>0) %>%
select(household_id, store_id, product_id, sales_value:coupon_match_disc, week, date)
# Join coupons, coupon_redemptions, campaign_description to get full information of coupons
redemptions <- coupons %>%
inner_join(campaign_descriptions) %>%
inner_join(coupon_redemptions, relationship = 'many-to-many') %>%
rename(date = redemption_date)
# Get every transaction with redemption
sample_df <- redemptions %>%
left_join(trans1, by = c('household_id','product_id','date'), relationship = 'many-to-many')
colSums(is.na(sample_df))
# Combine necessary information for transactions having coupon redeemed
transWithRedemptions <- redemptions %>%
inner_join(trans1, by = c('household_id','product_id','date'), relationship = 'many-to-many') %>%
arrange(desc(product_id))
# Total sales from transactions with redemption, grouped by product_id and store_id
transWithRedemptions_groupedByProductStoreId <- transWithRedemptions %>%
group_by(product_id, store_id) %>%
summarise(total_sales = sum(sales_value))
# Change for shorter name
transWithRedemptions_grouped <- transWithRedemptions_groupedByProductStoreId
#### Check if there is duplicate comb of product_id and store_id in every row
duplicates <- transWithRedemptions_grouped %>%
dplyr::group_by(product_id, store_id) %>%
dplyr::summarize(count = n()) %>%
dplyr::filter(count > 1) %>%
print(duplicates)
# Get unique existing product id and store id from the above
product_info_id <- unique(transWithRedemptions_groupedByProductStoreId$product_id)
store_info_id <- unique(transWithRedemptions_groupedByProductStoreId$store_id)
# Get rid of display_location=0 (not display)
promos_display <- promotions %>%
select(-(mailer_location:week)) %>%
dplyr::distinct(product_id, store_id, display_location, .keep_all = TRUE) %>%
dplyr::filter(display_location != 0)
# Join display location to transactions with redemption by keys: product_id and store_id
transWithRedemptions_displayLocation <- transWithRedemptions_groupedByProductStoreId %>%
inner_join(promos_display, by=c('product_id', 'store_id')) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size'))
# Get rid of mailer_location=0 (not presented in mail)
promos_mailer <- promotions %>%
select(-c(display_location, week)) %>%
dplyr::distinct(product_id, store_id, mailer_location, .keep_all = TRUE) %>%
dplyr::filter(mailer_location != 0)
# Join mailer location to transactions with redemption by keys: product_id and store_id
transWithRedemptions_mailerLocation <- promos_mailer %>%
inner_join(transWithRedemptions_groupedByProductStoreId, by=c('product_id', 'store_id')) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size'))
print(paste("Structure of transactions with redemptions, display location ver:"))
print(transWithRedemptions_displayLocation, n = 5)
print(paste("Structure of transactions with redemptions, mailer location ver:"))
print(transWithRedemptions_mailerLocation, n = 5)
# Promotions with display_location = 0, which is not displayed
promos_display0 <- promotions %>%
select(-c(mailer_location, week)) %>%
dplyr::filter(display_location == 0) %>%
dplyr::distinct(product_id, store_id, .keep_all = TRUE)
# Join display location = 0 to transactions with redemption by keys product_id and store_id
transWithRedemptions_displayLocationIs0 <- transWithRedemptions_grouped %>%
semi_join(promos_display0, by = c("product_id", "store_id")) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size'))
# Promotions with mailer_location = 0, which is not displayed
promos_mailer0 <- promotions %>%
select(-c(display_location, week)) %>%
dplyr::filter(mailer_location == 0) %>%
dplyr::distinct(product_id, store_id, .keep_all = TRUE)
# Join mailer location to transactions with redemptions by keys product_id and store_id
transWithRedemptions_mailerLocationIs0 <- transWithRedemptions_grouped %>%
semi_join(promos_mailer0, by = c("product_id", "store_id")) %>%
left_join(products, by='product_id') %>%
select(-c('manufacturer_id', 'brand','package_size'))
print(paste("Structure of transactions with redemptions with no display location:"))
print(transWithRedemptions_displayLocationIs0, n = 5)
print(paste("Structure of transactions with redemptions with no mailer location:"))
print(transWithRedemptions_mailerLocationIs0, n = 5)
full_transactions <- transWithRedemptions
trans_w_display <- transWithRedemptions_displayLocation
trans_w_mailer <- transWithRedemptions_mailerLocation
trans_w_display0 <- transWithRedemptions_displayLocationIs0
trans_w_mailer0 <- transWithRedemptions_mailerLocationIs0
summary_transactions <- full_transactions %>%
group_by(campaign_type) %>%
summarise(
total_sales = sum(sales_value),
count_type = n()
)
ggplot(data = summary_transactions, aes(x = campaign_type)) +
geom_col(aes(y = count_type, fill = 'Count of campaign type'), width = 0.5) +
geom_line(aes(y = total_sales, color = 'Total Sales'), group = 1) +
geom_point(aes(y = total_sales, color = 'Total Sales'), size = 3.0) +
scale_y_continuous(
name = "Count of campaign type",
breaks = seq(0, max(summary_transactions$total_sales) + 1, by = 400),
sec.axis = sec_axis(~.,
name = "Total Sales",
breaks = seq(0, max(summary_transactions$total_sales) + 1, by = 400),
labels = scales::dollar)
) +
labs(x = 'Campaign Types', title = "Total Sales Value and Count of Redemptions Per Campaign Type") +
scale_fill_manual(name = '', values = c("Count of campaign type" = "lightblue")) +
scale_color_manual(name = '', values = c("Total Sales Value" = 'red')) +
theme_classic() +
theme(plot.title = element_text(size = 20),
axis.title.x = element_text(margin = margin(t = 10), size = 14),
axis.title.y.left = element_text(margin = margin(r = 10), size = 14),
axis.title.y.right = element_text(margin = margin(l = 10), size = 14),
legend.position = 'bottom',
legend.title = element_text(size = 14),
legend.text = element_text(size = 14)
) +
annotate("text", x = "Type A", y = 7603, label = "Exceptionally High", color = "blue", size = 6, vjust = -1)
sample <- full_transactions %>%
group_by(product_id, campaign_type) %>%
summarise(total = sum(sales_value), .groups="drop") %>%
left_join(products, by="product_id") %>%
select(campaign_type, department, total) %>%
group_by(campaign_type, department) %>%
summarise(total_new = sum(total), .groups="drop")
ggplot(data = sample, aes(x = campaign_type, y = department, fill = total_new)) +
geom_tile() +
scale_fill_gradient2(low="white",
mid="lightblue",
high="blue",
name = "Sales Value",
labels = label_dollar()) +
geom_text(aes(label = label_dollar()(total_new)), color="black", size=4) +
theme_classic() +
labs(title = "Distribution of Sales Value by Campaign Types and Departments",
x = "Campaign Types",
y = "Deparments") +
theme(plot.title = element_text(size = 20),
axis.title.x = element_text(margin = margin(t = 10), size = 14),
axis.title.y = element_text(margin = margin(r = 10), size = 14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14)
)
sample <- trans_w_display %>%
dplyr::filter(department != "GROCERY") %>%
group_by(display_location, department) %>%
summarize(total = sum(total_sales), .groups = 'drop')
print(sample, n = 5)
ggplot(data = sample, aes(x = display_location, y = total, fill = department)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = c("DELI" = "#FF9999",
"DRUG GM" = "#66CC99",
"MEAT-PCKGD" = "#FFCC00",
"NUTRITION" = "#3399FF",
"MEAT" = "#FF66CC",
"PASTRY" = "#FF9966",
"SEAFOOD-PCKGD" = "#99CCFF",
"COSMETICS" = "#b3b3b3",
"PRODUCE" = "#ff7f00")) +
scale_x_discrete(labels = display_location_labels) +
scale_y_continuous(labels = label_dollar()) +
theme_classic() +
labs(title = "Total Sales by Department and Display Locations",
x = "Display Locations",
y = "Sales Value",
fill = "Departments") +
theme(plot.title = element_text(size = 20),
axis.title.x = element_text(margin = margin(t = 10), size = 14),
axis.title.y = element_text(margin = margin(r = 10), size = 14),
axis.text.y = element_text(size = 14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14)
)
total_sales_per_display_location <- sample %>%
group_by(display_location) %>%
summarise(total_sales_location = sum(total), .groups = "drop")
final_df <- sample %>%
left_join(total_sales_per_display_location, by = "display_location") %>%
mutate(percentage = round((total / total_sales_location) * 100,2))
ggplot(final_df, aes(x = display_location, y = percentage, fill = department)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = c("DELI" = "#FF9999",
"DRUG GM" = "#66CC99",
"MEAT-PCKGD" = "#FFCC00",
"NUTRITION" = "#3399FF",
"MEAT" = "#FF66CC",
"PASTRY" = "#FF9966",
"SEAFOOD-PCKGD" = "#99CCFF",
"COSMETICS" = "#b3b3b3",
"PRODUCE" = "#ff7f00")) +
scale_x_discrete(labels = display_location_labels) +
scale_y_continuous(labels = scales::percent_format(scale = 1)) +
theme_classic() +
labs(title = "Total Sales by Department and Campaign Type in Percentage",
x = "Display Locations",
y = "Percentage Sales",
fill = "Departments") +
theme(plot.title = element_text(size = 20),
axis.title.x = element_text(margin = margin(t = 10), size = 14),
axis.title.y = element_text(margin = margin(r = 10), size = 14),
axis.text.y = element_text(size = 14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14)
)
# Display
sample1 <- trans_w_display %>%
group_by(department) %>%
summarize(total = sum(total_sales), .groups = 'drop') %>%
arrange(desc(department)) %>%
mutate(type = "Being Displayed")
# Not Display
sample2 <- trans_w_display0 %>%
group_by(department) %>%
summarise(total = sum(total_sales)) %>%
arrange(desc(department)) %>%
mutate(type = "Not Being Displayed")
combined <- bind_rows(sample1, sample2)
combined
ggplot(data = combined, aes(x = department, y = total, fill = type)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(breaks = seq(0, max(combined$total) + 1, by = 500),
labels = label_dollar()) +
geom_text(aes(label = round(total, 2)),
position = position_dodge(width = 0.9),
vjust = -1,
color = "black") +
labs(title = "Total Sales Across Departments with Display/Not Display",
x = "Departments",
y = "Total Sales",
fill = "Display Type") +
theme_classic() +
theme(plot.title = element_text(size = 20),
axis.title.x = element_text(margin = margin(t = 10), size = 14),
axis.title.y = element_text(margin = margin(r = 10), size = 14),
axis.text.y = element_text(size = 14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14)
) +
scale_fill_manual(values = c("Being Displayed" = "lightblue",
"Not Being Displayed" = "lightgreen"))
sample <- trans_w_mailer %>%
dplyr::filter(department != "GROCERY") %>%
group_by(mailer_location, department) %>%
summarise(total = sum(total_sales), .groups = "drop") %>%
arrange(desc(total))
print(sample, n=5)
ggplot(data = sample, aes(x = mailer_location, y = total, fill = department)) +
geom_bar(stat = "identity", position = "stack") +
scale_x_discrete(labels = mailer_location_labels) +
scale_fill_manual(values = c("DRUG GM" = "#8da0cb",
"MEAT" = "#a6d854",
"MEAT-PCKGD" = "#e78ac3",
"PRODUCE" = "#66c2a5",
"SEAFOOD-PCKGD" = "#fb9a99",
"DELI" = "#e5c494",
"SEAFOOD" = "#b3b3b3",
"NUTRITION" = "#ffd92f",
"COSMETICS" = "#33a02c",
"COUPON" = "#ff7f00",
"PASTRY" = "#1f78b4",
"TRAVEL & LEISURE" = "#e31a1c")) +
scale_y_continuous(breaks = seq(0, 3500, by = 500),
labels = label_dollar()) +
theme_classic() +
theme(plot.title = element_text(size = 20),
axis.title.x = element_text(margin = margin(t = 10), size = 14),
axis.title.y = element_text(margin = margin(r = 10), size = 14),
axis.text.y = element_text(size = 14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14)
) +
labs(title = "Total Sales by Department and Mailer Locations",
x = "Mailer Locations",
y = "Total Sale",
fill = "Departments")
total_sales_per_mailer_location <- sample %>%
group_by(mailer_location) %>%
summarise(total_sales_location = sum(total), .groups = "drop")
final_df <- sample %>%
left_join(total_sales_per_mailer_location, by = "mailer_location") %>%
mutate(percentage = round((total / total_sales_location) * 100,2))
ggplot(final_df, aes(x = mailer_location, y = percentage, fill = department)) +
geom_bar(stat = "identity", position = "stack") +
scale_fill_manual(values = c("DRUG GM" = "#8da0cb",
"MEAT" = "#a6d854",
"MEAT-PCKGD" = "#e78ac3",
"PRODUCE" = "#66c2a5",
"SEAFOOD-PCKGD" = "#fb9a99",
"DELI" = "#e5c494",
"SEAFOOD" = "#b3b3b3",
"NUTRITION" = "#ffd92f",
"COSMETICS" = "#33a02c",
"COUPON" = "#ff7f00",
"PASTRY" = "#1f78b4",
"TRAVEL & LEISURE" = "#e31a1c")) +
scale_x_discrete(labels = mailer_location_labels) +
theme_classic() +
scale_y_continuous(expand = c(0,2),
labels = scales::percent_format(scale = 1)) +
theme(plot.title = element_text(size = 20),
axis.title.x = element_text(margin = margin(t = 10), size = 14),
axis.title.y = element_text(margin = margin(r = 10), size = 14),
axis.text.y = element_text(size = 14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14)
) +
labs(title = "Total Sales by Department and Campaign Type in Percentage",
x = "Mailer Locations",
y = "Percentage Sales",
fill = "Departments")
# Mail presented
sample1 <- trans_w_mailer %>%
dplyr::filter(department!="GROCERY") %>%
group_by(department) %>%
summarize(total = sum(total_sales), .groups = 'drop') %>%
arrange(desc(department)) %>%
mutate(type = "Mail Presented")
# Not Mail presented
sample2 <- trans_w_mailer0 %>%
dplyr::filter(department != "GROCERY") %>%
group_by(department) %>%
summarise(total = sum(total_sales)) %>%
arrange(desc(department)) %>%
mutate(type = "Not Mail Presented")
combined <- bind_rows(sample1, sample2)
combined
ggplot(data = combined, aes(x = department, y = total, fill = type)) +
geom_bar(stat = "identity", position = "dodge") +
scale_y_continuous(breaks = seq(0, max(combined$total) + 100, by = 500),
labels = label_dollar()) +
geom_text(aes(label = scales::label_dollar()(total)),
position = position_dodge(width = 0.9),
vjust = -1,
color = "black") +
labs(title = "Total Sales Across Departments with Mail Presence",
x = "Departments",
y = "Total Sales",
fill = "Mail Presence Type") +
theme_classic() +
theme(plot.title = element_text(size = 20),
axis.title.x = element_text(margin = margin(t = 10), size = 14),
axis.title.y = element_text(margin = margin(r = 10), size = 14),
axis.text.y = element_text(size = 14),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14)
) +
scale_fill_manual(values = c("Mail Presented" = "lightblue",
"Not Mail Presented" = "lightgreen"))
mailer_promo <- trans_w_mailer %>%
select(department, total_sales) %>%
group_by(department) %>%
summarise(total = sum(total_sales), .groups="drop") %>%
mutate(promo_type = "Mail")
display_promo <- trans_w_display %>%
ungroup() %>%
select(department, total_sales) %>%
group_by(department) %>%
summarise(total = sum(total_sales), .groups="drop") %>%
mutate(promo_type = "Display")
summary_data <- bind_rows(mailer_promo, display_promo)
ggplot(data = summary_data, aes(x = department, y = total, color = promo_type)) +
geom_point(alpha = 0.6, size = 10) +
geom_segment(aes(xend = department, yend = 0), linetype = "dotted", linewidth = 1.5) +
labs(title = "Sales Comparison Between Display and Mailer Promotions",
x = "Department",
y = "Total Sales",
color = "Presented Type") +
scale_y_continuous(breaks = seq(0, max(summary_data$total) + 1, by = 300),
labels = label_dollar()) +
theme_classic() +
theme(plot.title = element_text(size = 20),
axis.title.x = element_text(margin = margin(t = 10), size = 14),
axis.title.y = element_text(margin = margin(r = 10), size = 14),
axis.text.y = element_text(size = 12),
legend.title = element_text(size = 14),
legend.text = element_text(size = 14)
)
source("C:/Users/vopq/OneDrive - University of Cincinnati/Fall 2024/BANA4080/BANA4080_midterm_project/Report.Rmd")
source("C:/Users/vopq/OneDrive - University of Cincinnati/Fall 2024/BANA4080/BANA4080_midterm_project/Report.Rmd")
